#marshal(message, message_fields), status.HTTP_202_ACCEPTED = @marshal_with(message_fields) + return message
# 'message' : obj to be serialzed and 'message_fields' which fields to be serialzed
==================================

make a request with httpie

http GET http://127.0.0.1:5051/api/messages/
http GET http://127.0.0.1:5051/api/messages/<int:id>
http DELETE http://127.0.0.1:5051/api/messages/<int:id>

you can try POST & PATCH using postman
====================================

1- create user role
psql > create role test2 with login password 'root';
2- run all privilage
psql > grant all privileges on database messages to test2;
======================
\q to quit psql

======================

schema to validate , serialze and deserialze models

======================

1- make migrations ==>  python api/migrate.py db init
2- python api/migrate.py db migrate
3- python api/migrate.py db upgrade
=======================================
there are 3 ways of auth , check db password hashed to see the difference
 1- jwt : adding it to create app method
 2- hashed:
     2-1 : from passlib.apps import custom_app_context as password_context
     2-2 : self.password = password_context.encrypt(password)


============================
RUN TESTS

nose2 -v --with-coverage

STILL HAS ISSUES WITH UNITTEST